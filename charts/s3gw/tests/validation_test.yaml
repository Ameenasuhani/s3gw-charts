---
# This set of unit tests exercises the chart validation template. That is a
# template designed to deliberately fail the manifest generation when
# nonsensical configuration values are provided.
suite: Validation
templates:
  - chart-validation.yaml
release:
  name: s3gw
  namespace: s3gw-system
tests:

  - it: Fail templating if ingress is enabled without publicDomain
    set:
      ingress.enabled: true
      publicDomain: null
      ui.enabled: false
      useExistingSecret: false
      useCertManager: false
    asserts:
      - failedTemplate:
          errorMessage: "Please provide a value for `.Values.publicDomain`."

  - it: Don't fail if publicDomain is provided
    set:
      ingress.enabled: true
      publicDomain: "example.com"
      ui.enabled: false
      useExistingSecret: false
      useCertManager: false
      tls.publicDomain.crt: foo
      tls.publicDomain.key: bar
      tls.privateDomain.crt: abc
      tls.privateDomain.key: xyz
    asserts:
      # An empty document counts as having failed templating. But in case of
      # chart-validation.yaml we expect the document to be empty if none of the
      # checks fail.
      - hasDocuments:
          count: 0

  - it: Don't fail if without publicDomain if ingress is disabled
    set:
      ingress.enabled: false
      publicDomain: null
      useExistingSecret: false
      useCertManager: false
    asserts:

      - hasDocuments:
          count: 0

  # - - -
  - it: Fail templating if UI is enabled without a ui.publicDomain
    set:
      ui.enabled: true
      ui.publicDomain: null
      publicDomain: example.com
      useExistingSecret: false
      useCertManager: false
    asserts:

      - failedTemplate:
          errorMessage: "Please provide a value for `.Values.ui.publicDomain`."

  - it: Don't fail if ui.publicDomain is provided
    set:
      ui.enabled: true
      ui.publicDomain: "example.com"
      publicDomain: "example.com"
      useExistingSecret: false
      useCertManager: false
      tls.publicDomain.crt: foo
      tls.publicDomain.key: bar
      tls.privateDomain.crt: abc
      tls.privateDomain.key: xyz
      tls.ui.publicDomain.crt: aaa
      tls.ui.publicDomain.key: bbb
    asserts:

      - hasDocuments:
          count: 0

  - it: Don't fail if UI is disabled and doesn't have a ui.publicDomain
    set:
      ui.enabled: false
      ui.publicDomain: null
      publicDomain: example.com
      useExistingSecret: false
      useCertManager: false
      tls.publicDomain.crt: foo
      tls.publicDomain.key: bar
      tls.privateDomain.crt: abc
      tls.privateDomain.key: xyz
    asserts:

      - hasDocuments:
          count: 0

  # - - -
  - it: Fail templating when using existing secret by no secret is given
    set:
      useExistingSecret: true
      defaultUserCredentialsSecret: null
      ingress.enabled: false
      useCertManager: false
    asserts:

      - failedTemplate:
          errorMessage: "Please provide a secret name for `.Values.defaultUserCredentialsSecret`"

  - it: Don't fail when not using an existing secret
    set:
      useExistingSecret: false
      defaultUserCredentialsSecret: null
      ingress.enabled: false
      useCertManager: false
    asserts:

      - hasDocuments:
          count: 0

  - it: Don't fail when a secret name is given
    set:
      useExistingSecret: true
      defaultUserCredentialsSecret: "my-super-secret"
      ingress.enabled: false
      useCertManager: false
    asserts:

      - hasDocuments:
          count: 0

  # - - -
  - it: Fail templating with default email and letsencrypt issuer
    set:
      useCertManager: true
      tlsIssuer: "s3gw-letsencrypt-issuer"
      ingress.enabled: true
      publicDomain: "example.com"
      ui.enabled: false
      useExistingSecret: false
    asserts:

      - failedTemplate:
          errorMessage: "Please provide a valid email for letsencrypt"

  - it: Don't fail with default email and other certificate issuer
    set:
      useCertManager: true
      tlsIssuer: "s3gw-issuer"
      ingress.enabled: true
      publicDomain: "example.com"
      ui.enabled: false
      useExistingSecret: false
    asserts:

      - hasDocuments:
          count: 0

  - it: Don't fail with valid email and letsencrypt issuer
    set:
      useCertManager: true
      tlsIssuer: "s3gw-letsencrypt-issuer"
      email: "someone@emailprovider.com"
      ingress.enabled: true
      publicDomain: "example.com"
      ui.enabled: false
      useExistingSecret: false
    asserts:

      - hasDocuments:
          count: 0

  - it: Don't fail with default email when not using cert-manager
    set:
      useCertManager: false
      tlsIssuer: "s3gw-letsencrypt-issuer"
      ingress.enabled: true
      publicDomain: "example.com"
      ui.enabled: false
      useExistingSecret: false
      tls.publicDomain.crt: foo
      tls.publicDomain.key: bar
      tls.privateDomain.crt: abc
      tls.privateDomain.key: xyz
    asserts:

      - hasDocuments:
          count: 0
